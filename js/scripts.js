// Generated by CoffeeScript 1.3.3
(function() {
  var autoLink,
    __slice = [].slice;

  autoLink = function() {
    var callback, key, link_attributes, options, url_pattern, value, _ref;
    options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    url_pattern = /(\b(https?):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[\-A-Z0-9+&@#\/%=~_|])/ig;
    if (options.length > 0) {
      if (options[0].callback && Object.prototype.toString.call(options[0].callback) === '[object Function]') {
        callback = options[0].callback;
      }
      delete options[0].callback;
      link_attributes = '';
      _ref = options[0];
      for (key in _ref) {
        value = _ref[key];
        link_attributes += " " + key + "='" + value + "'";
      }
      return this.replace(url_pattern, function(match, url) {
        return callback && callback(url) || ("<a href='" + url + "'" + link_attributes + ">" + url + "</a>");
      });
    } else {
      return this.replace(url_pattern, "<a href='$1'>$1</a>");
    }
  };

  String.prototype['autoLink'] = autoLink;

}).call(this);
var p = document.getElementsByTagName('P');
for(var i = 0; i < p.length; i++) {
    p[i].innerHTML = p[i].innerHTML.autoLink();
}

if(typeof prettyPrint != 'undefined') {
    var c = document.getElementsByTagName('PRE');
    //var c = document.getElementsByTagName('CODE');
    for(var i = 0; i < c.length; i++) {
        c[i].className = 'prettyprint';
    }
    prettyPrint();
}

function mypipe(data) {
    var ul = document.getElementById('pipe');
    for(var i = 0; i < data.value.items.length; i++) {
        var item = data.value.items[i];
        var a = document.createElement('A');
        var li = document.createElement('LI');

        a.href = item.link;
        a.innerHTML = item.title;

        li.appendChild(a);
        ul.appendChild(li);
    }
}
